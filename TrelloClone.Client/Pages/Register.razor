@page "/register"
@using TrelloClone.Shared.DTOs
@using TrelloClone.Client.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Register - TrelloClone</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <div class="auth-logo">
                <i class="bi bi-kanban"></i>
                <span>TrelloClone</span>
            </div>
            <h1>Create your account</h1>
            <p>Get started with your free account today.</p>
        </div>

        <div class="auth-body">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="auth-error" role="alert">
                    <i class="bi bi-exclamation-circle"></i>
                    <span>@errorMessage</span>
                </div>
            }

            <EditForm Model="registerRequest" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="registerRequest.UserName" placeholder="Enter your username" />
                    <ValidationMessage For="@(() => registerRequest.UserName)" />
                </div>

                <div class="form-group">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="registerRequest.Email" placeholder="Enter your email" />
                    <ValidationMessage For="@(() => registerRequest.Email)" />
                </div>

                <div class="form-group">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="registerRequest.Password"
                               placeholder="Enter your password" />
                    <ValidationMessage For="@(() => registerRequest.Password)" />
                </div>

                <div class="form-group">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <input type="password" id="confirmPassword" class="form-control" @bind="confirmPassword"
                           placeholder="Confirm your password" @onpaste="HandlePaste"
                           @oninput="HandleConfirmPasswordInput" />
                    @if (!string.IsNullOrEmpty(confirmPasswordError))
                    {
                        <div class="validation-message">@confirmPasswordError</div>
                    }
                </div>

                <button type="submit" class="auth-button" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner"></span>
                    }
                    Create Account
                </button>
            </EditForm>

            <div class="auth-footer">
                <p>Already have an account? <a href="/login" class="auth-link">Log in</a></p>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerRequest = new();
    private string confirmPassword = string.Empty;
    private string confirmPasswordError = string.Empty;
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private void HandlePaste(ClipboardEventArgs e)
    {
        confirmPasswordError = "Pasting is not allowed in this field.";
        InvokeAsync(StateHasChanged);

        Task.Run(async () =>
        {
            await Task.Delay(10);
            await JSRuntime.InvokeVoidAsync("eval",
                "document.getElementById('confirmPassword').value = ''");
            confirmPassword = string.Empty;
        });
    }

    private void HandleConfirmPasswordInput(ChangeEventArgs e)
    {
        confirmPassword = e.Value?.ToString() ?? "";
        ValidatePasswords();
    }

    private bool ValidatePasswords()
    {
        if (string.IsNullOrEmpty(registerRequest.Password) && string.IsNullOrEmpty(confirmPassword))
        {
            confirmPasswordError = "";
            return true;
        }

        if (string.IsNullOrEmpty(registerRequest.Password) || string.IsNullOrEmpty(confirmPassword))
        {
            confirmPasswordError = "Both password fields are required.";
            return false;
        }

        if (registerRequest.Password != confirmPassword)
        {
            confirmPasswordError = "Passwords do not match.";
            return false;
        }

        confirmPasswordError = "";
        return true;
    }

    private async Task HandleRegister()
    {
        if (!ValidatePasswords())
        {
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            await AuthService.RegisterAsync(registerRequest);
            Navigation.NavigateTo("/boards");
        }
        catch (Exception ex)
        {
            errorMessage = $"Registration failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}