@page "/board/{boardId:guid}"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using TrelloClone.Shared.DTOs
@using TrelloClone.Shared.DTOs.SignalR
@inject IBoardService BoardService
@inject ColumnService ColumnService
@inject TaskService TaskService
@inject IInvitationService InvitationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid p-3">
    @if (loading)
    {
        <LoadingSpinner></LoadingSpinner>
    }
    else if (columns == null)
    {
        <div class="alert alert-danger">
            <h4>Error</h4>
            <p>Failed to load board columns.</p>
            <button class="btn btn-primary" @onclick="@(() => GoBack())">Go Back</button>
        </div>
    }
    else
    {
        <div class="row mb-3">
            <div class="d-flex align-items-center justify-content-between flex-wrap mb-3">
                <div class="d-flex align-items-center">
                    <h2 class="mb-0 me-4">Board Columns</h2>
                    @{
                        var totalOnline = onlineUsers.Count + 1; // +1 for current user
                    }
                    <div class="online-users-compact">
                        <span class="online-dot"></span>
                        <span class="online-text">@totalOnline online</span>
                        <div class="online-tooltip">
                            <div class="user-item current-user">@currentUserName (You)</div>
                            @foreach (var user in onlineUsers.Take(9))
                            {
                                <div class="user-item">@user</div>
                            }
                            @if (onlineUsers.Count > 9)
                            {
                                <div class="user-item more">+@(onlineUsers.Count - 9) more</div>
                            }
                        </div>
                    </div>
                </div>

                <div class="board-actions">
                    @if (canEdit)
                    {
                        <button class="btn btn-primary" @onclick="ShowCreateColumn">
                            <i class="bi bi-plus-lg"></i> Add Column
                        </button>
                    }
                    @if (canInvite)
                    {
                        <button class="btn btn-outline-primary" @onclick="ShowInviteUser">
                            <i class="bi bi-person-plus"></i> Invite User
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="columns-container-sortable" id="columnsContainer">
            @foreach (var column in sortedColumns)
            {
                <div class="column-sortable-item" data-column-id="@column.Id" @key="column.Id">
                    <ColumnCard Column="@column" IsBeingEditedByOther="@(IsBeingEditedByOther("column", column.Id))"
                        EditingUserName="@(GetEditingUserName("column", column.Id))" IsEditing="@(editingColumnId == column.Id)"
                        EditingTaskId="@editingTaskId" CanEdit="@canEdit" AvailableUsers="@availableUsers"
                        OnStartEdit="@(() => StartEditColumn(column.Id, column.Title))"
                        OnSaveEdit="@((title) => SaveColumnEdit(column.Id, title))" OnCancelEdit="@CancelEditColumn"
                        OnDelete="@(() => DeleteColumn(column.Id))" OnCreateTask="@(() => ShowCreateTask(column.Id))"
                        OnStartEditTask="@((data) => StartEditTask(data.taskId, data.name, data.priority))"
                        OnSaveEditTask="@((data) => SaveTaskEdit(column.Id, data.taskId, data.name, data.priority, data.assignedUsers))"
                        OnCancelEditTask="@CancelEditTask" OnDeleteTask="@((taskId) => DeleteTask(column.Id, taskId))"
                        OnTaskAssignmentChange="@((data) => HandleTaskAssignmentChange(data.userId, data.isAssigned))"
                        IsTaskBeingEditedByOther="@((taskId) => IsBeingEditedByOther("task", taskId))"
                        GetTaskEditingUserName="@((taskId) => GetEditingUserName("task", taskId))" />
                </div>
            }
        </div>
    }
</div>

<TaskModal Show="@showCreateTaskModal" TaskModel="@newTaskRequest" OnCancel="@HideCreateTask"
    OnSubmit="@HandleCreateTask" IsSubmitting="@creatingTask" AvailableUsers="@availableUsers" />
<ColumnModal Show="@showCreateColumnModal" ColumnModel="@newColumnRequest" OnCancel="@HideCreateColumn"
    OnSubmit="@HandleCreateColumn" IsSubmitting="@creatingColumn" />
<InviteModal Show="@showInviteModal" InviteModel="@inviteRequest" OnCancel="@HideInviteUser"
    OnSubmit="@HandleSendInvite" IsSubmitting="@sendingInvite" />
@code {
    [Parameter] public Guid BoardId { get; set; }
    private List<ColumnDto>? columns;
    private bool loading = true;
    private bool showCreateColumnModal = false;
    private bool creatingColumn = false;

    // Task creation fields
    private bool showCreateTaskModal = false;
    private bool creatingTask = false;
    private Guid selectedColumnId;
    private List<UserDto>? availableUsers;

    // Edit fields
    private Guid editingColumnId = Guid.Empty;
    private string editColumnTitle = string.Empty;
    private Guid editingTaskId = Guid.Empty;
    private string editTaskName = string.Empty;
    private PriorityLevel editTaskPriority = PriorityLevel.Medium;
    private List<Guid> editTaskAssignedUserIds = new List<Guid>();

    // Invite fields
    private bool showInviteModal = false;
    private bool sendingInvite = false;

    // Permissions
    private bool canEdit;
    private bool canInvite;

    private CreateTaskRequest newTaskRequest = new CreateTaskRequest();
    private CreateColumnRequest newColumnRequest = new CreateColumnRequest();
    private CreateInvitationRequest inviteRequest = new CreateInvitationRequest();
    [Inject] private BoardHubClient BoardHub { get; set; } = default!;
    [Inject] private ILogger<Board> Logger { get; set; } = default!;
    [Inject] private AuthenticationStateProvider AuthStateProvider { get; set; } = default!;
    private HashSet<string> onlineUsers = new();
    private Dictionary<string, string> editingUsers = new(); // itemId -> userName
    private string currentUserId = string.Empty;
    private string currentUserName = string.Empty;

    private List<ColumnDto> sortedColumns = new();
    private DotNetObjectReference<Board>? dotNetRef;

    protected override async Task OnParametersSetAsync()
    {
        // Get current user info
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst("sub")?.Value ?? "";
        currentUserName = authState.User.Identity?.Name ?? "Unknown";
        canEdit = await BoardService.CanEditAsync(BoardId);
        canInvite = await BoardService.CanInviteAsync(BoardId);
        await LoadColumns();
        await SetupSignalR();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
        }

        if (!loading && columns?.Any() == true)
        {
            await JSRuntime.InvokeVoidAsync("initColumnsSortable", "columnsContainer", dotNetRef);
        }
    }

    [JSInvokable]
    public async Task OnColumnsReordered(string[] orderedColumnIds)
    {
        if (!canEdit) return;

        try
        {
            var positions = orderedColumnIds
            .Select((id, index) => new ColumnPositionDto
            {
                Id = Guid.Parse(id),
                Position = index
            })
            .ToList();

            await ColumnService.ReorderColumnsAsync(BoardId, positions);

            // Update local positions
            foreach (var pos in positions)
            {
                var column = columns?.FirstOrDefault(c => c.Id == pos.Id);
                if (column != null)
                {
                    column.Position = pos.Position;
                }
            }

            UpdateSortedColumns();
            StateHasChanged();

            await BoardHub.NotifyColumnMovedAsync(new ColumnMoveInfo
            {
                ColumnId = orderedColumnIds.Last(),
                NewPosition = positions.Count - 1,
                UserId = currentUserId,
                UserName = currentUserName
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error reordering columns");
        }
    }

    [JSInvokable]
    public async Task OnTasksReordered(string columnId, string[] orderedTaskIds)
    {
        if (!canEdit) return;

        try
        {
            var columnGuid = Guid.Parse(columnId);
            var positions = orderedTaskIds
            .Select((id, index) => new TaskPositionDto
            {
                Id = Guid.Parse(id),
                Position = index,
                ColumnId = columnGuid
            })
            .ToList();

            await TaskService.ReorderTasksAsync(positions);

            // Update local positions
            var column = columns?.FirstOrDefault(c => c.Id == columnGuid);
            if (column?.Tasks != null)
            {
                foreach (var pos in positions)
                {
                    var task = column.Tasks.FirstOrDefault(t => t.Id == pos.Id);
                    if (task != null)
                    {
                        task.Position = pos.Position;
                    }
                }

                // Reorder tasks locally
                column.Tasks = column.Tasks
                .OrderBy(t => positions.FindIndex(p => p.Id == t.Id))
                .ToList();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error reordering tasks");
        }
    }

    [JSInvokable]
    public async Task OnTaskMovedBetweenColumns(string taskId, string fromColumnId, string toColumnId, int newIndex)
    {
        if (!canEdit) return;

        try
        {
            var taskGuid = Guid.Parse(taskId);
            var fromColumnGuid = Guid.Parse(fromColumnId);
            var toColumnGuid = Guid.Parse(toColumnId);

            var sourceColumn = columns?.FirstOrDefault(c => c.Id == fromColumnGuid);
            var targetColumn = columns?.FirstOrDefault(c => c.Id == toColumnGuid);
            var task = sourceColumn?.Tasks?.FirstOrDefault(t => t.Id == taskGuid);

            if (task == null || sourceColumn == null || targetColumn == null) return;

            // Remove from source column
            sourceColumn.Tasks?.Remove(task);

            // Add to target column
            targetColumn.Tasks ??= new List<TaskDto>();
            var insertIndex = Math.Min(newIndex, targetColumn.Tasks.Count);
            targetColumn.Tasks.Insert(insertIndex, task);
            task.ColumnId = toColumnGuid;

            // Update positions for both columns
            var positions = new List<TaskPositionDto>();

            if (sourceColumn.Tasks != null)
            {
                for (int i = 0; i < sourceColumn.Tasks.Count; i++)
                {
                    sourceColumn.Tasks[i].Position = i;
                    positions.Add(new TaskPositionDto
                    {
                        Id = sourceColumn.Tasks[i].Id,
                        Position = i,
                        ColumnId = sourceColumn.Id
                    });
                }
            }

            if (targetColumn.Tasks != null)
            {
                for (int i = 0; i < targetColumn.Tasks.Count; i++)
                {
                    targetColumn.Tasks[i].Position = i;
                    positions.Add(new TaskPositionDto
                    {
                        Id = targetColumn.Tasks[i].Id,
                        Position = i,
                        ColumnId = targetColumn.Id
                    });
                }
            }

            await TaskService.ReorderTasksAsync(positions);

            await BoardHub.NotifyTaskMovedAsync(new TaskMoveInfo
            {
                TaskId = taskId,
                FromColumnId = fromColumnId,
                ToColumnId = toColumnId,
                NewPosition = newIndex,
                UserId = currentUserId,
                UserName = currentUserName
            });

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error moving task between columns");
            await LoadColumns(); // Reload on error
        }
    }

    private async Task LoadColumns()
    {
        try
        {
            loading = true;
            columns = await ColumnService.GetColumnsForBoardAsync(BoardId);
            if (columns != null)
            {
                foreach (var column in columns)
                {
                    column.Tasks = await TaskService.GetTasksForColumnAsync(column.Id);
                }

                // Load available users for the board once
                if (columns.Any())
                {
                    try
                    {
                        availableUsers = await TaskService.GetAvailableUsersForTaskAsync(columns.First().Id);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error loading available users: {ex.Message}");
                        availableUsers = new List<UserDto>();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading columns: {ex.Message}");
            columns = null;
        }
        finally
        {
            loading = false;
            UpdateSortedColumns();
        }
    }

    private void UpdateSortedColumns()
    {
        sortedColumns = columns?.OrderBy(c => c.Position).ToList() ?? new();
    }

    private async Task SetupSignalR()
    {
        try
        {
            // Subscribe to events
            BoardHub.UserJoinedBoard += OnUserJoinedBoard;
            BoardHub.UserLeftBoard += OnUserLeftBoard;
            BoardHub.TaskMoved += OnTaskMoved;
            BoardHub.ColumnMoved += OnColumnMoved;
            BoardHub.TaskCreated += OnTaskCreated;
            BoardHub.TaskUpdated += OnTaskUpdated;
            BoardHub.TaskDeleted += OnTaskDeleted;
            BoardHub.ColumnCreated += OnColumnCreated;
            BoardHub.ColumnUpdated += OnColumnUpdated;
            BoardHub.ColumnDeleted += OnColumnDeleted;
            BoardHub.UserStartedEditing += OnUserStartedEditing;
            BoardHub.UserStoppedEditing += OnUserStoppedEditing;
            BoardHub.TaskAssignmentUpdating += OnTaskAssignmentUpdating;
            await BoardHub.JoinBoardAsync(BoardId.ToString());
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error setting up SignalR");
        }
    }

    private void ShowCreateColumn()
    {
        newColumnRequest = new CreateColumnRequest
        {
            BoardId = BoardId,
            Position = columns?.Count ?? 0
        };
        showCreateColumnModal = true;
    }

    private void HideCreateColumn()
    {
        showCreateColumnModal = false;
    }

    private async Task HandleCreateColumn()
    {
        if (string.IsNullOrWhiteSpace(newColumnRequest.Title) || creatingColumn) return;
        try
        {
            creatingColumn = true;
            var newColumn = await ColumnService.CreateColumnAsync(newColumnRequest);
            columns?.Add(newColumn);
            UpdateSortedColumns();
            await BoardHub.NotifyColumnCreatedAsync(newColumn);
            HideCreateColumn();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating column: {ex.Message}");
        }
        finally
        {
            creatingColumn = false;
        }
    }

    private async Task DeleteColumn(Guid columnId)
    {
        try
        {
            await ColumnService.DeleteColumnAsync(BoardId, columnId);
            columns?.RemoveAll(c => c.Id == columnId);
            UpdateSortedColumns();
            await BoardHub.NotifyColumnDeletedAsync(columnId.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting column: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private async Task ShowCreateTask(Guid columnId)
    {
        selectedColumnId = columnId;
        newTaskRequest = new CreateTaskRequest
        {
            ColumnId = columnId,
            AssignedUserIds = new List<Guid>()
        };

        // Load available users for this column's board
        try
        {
            availableUsers = await TaskService.GetAvailableUsersForTaskAsync(columnId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading available users: {ex.Message}");
            availableUsers = new List<UserDto>();
        }

        showCreateTaskModal = true;
    }

    private void HideCreateTask()
    {
        showCreateTaskModal = false;
    }

    private async Task HandleCreateTask()
    {
        if (string.IsNullOrWhiteSpace(newTaskRequest.Name) || creatingTask) return;
        try
        {
            creatingTask = true;
            var newTask = await TaskService.CreateTaskAsync(newTaskRequest);
            var column = columns?.FirstOrDefault(c => c.Id == selectedColumnId);
            if (column != null)
            {
                column.Tasks ??= new List<TaskDto>();
                column.Tasks.Add(newTask);
            }
            await BoardHub.NotifyTaskCreatedAsync(newTask);
            HideCreateTask();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating task: {ex.Message}");
        }
        finally
        {
            creatingTask = false;
        }
    }

    private async Task DeleteTask(Guid columnId, Guid taskId)
    {
        try
        {
            await TaskService.DeleteTaskAsync(columnId, taskId);
            var column = columns?.FirstOrDefault(c => c.Id == columnId);
            column?.Tasks?.RemoveAll(t => t.Id == taskId);
            await BoardHub.NotifyTaskDeletedAsync(taskId.ToString(), columnId.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting task: {ex.Message}");
        }
    }

    private async Task StartEditColumn(Guid columnId, string title)
    {
        editingColumnId = columnId;
        editColumnTitle = title;
        await BoardHub.NotifyUserStartedEditingAsync("column", columnId.ToString());
    }

    private async Task CancelEditColumn()
    {
        if (editingColumnId != Guid.Empty)
        {
            await BoardHub.NotifyUserStoppedEditingAsync("column", editingColumnId.ToString());
        }
        editingColumnId = Guid.Empty;
        editColumnTitle = string.Empty;
    }

    private async Task StartEditTask(Guid taskId, string name, PriorityLevel priority)
    {
        editingTaskId = taskId;
        editTaskName = name;
        editTaskPriority = priority;

        // Get current task and its assigned users
        var column = columns?.FirstOrDefault(c => c.Tasks?.Any(t => t.Id == taskId) == true);
        var task = column?.Tasks?.FirstOrDefault(t => t.Id == taskId);
        editTaskAssignedUserIds = task?.AssignedUserIds?.ToList() ?? new List<Guid>();

        // Load available users first
        if (column != null)
        {
            try
            {
                availableUsers = await TaskService.GetAvailableUsersForTaskAsync(column.Id);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading available users: {ex.Message}");
                availableUsers = new List<UserDto>();
            }
        }

        await BoardHub.NotifyUserStartedEditingAsync("task", taskId.ToString());
        StateHasChanged();
    }

    private async Task CancelEditTask()
    {
        if (editingTaskId != Guid.Empty)
        {
            await BoardHub.NotifyUserStoppedEditingAsync("task", editingTaskId.ToString());
        }
        editingTaskId = Guid.Empty;
        editTaskName = string.Empty;
        editTaskPriority = PriorityLevel.Medium;
        editTaskAssignedUserIds = new List<Guid>();
    }

    private void ShowInviteUser()
    {
        inviteRequest = new CreateInvitationRequest();
        showInviteModal = true;
    }

    private void HideInviteUser()
    {
        showInviteModal = false;
    }

    private async Task HandleSendInvite()
    {
        if (string.IsNullOrWhiteSpace(inviteRequest.Username) || sendingInvite) return;
        try
        {
            sendingInvite = true;
            await InvitationService.SendInvitation(
            BoardId,
            inviteRequest.Username.Trim(),
            inviteRequest.PermissionLevel
            );
            HideInviteUser();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending invite: {ex.Message}");
        }
        finally
        {
            sendingInvite = false;
        }
    }

    // Event handlers
    private void OnUserJoinedBoard(string userId, string userName)
    {
        if (userId != currentUserId && userName != currentUserName)
        {
            onlineUsers.Add(userName);
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnUserLeftBoard(string userId, string userName)
    {
        onlineUsers.Remove(userName);
        InvokeAsync(StateHasChanged);
    }

    private void OnTaskMoved(TaskMoveInfo moveInfo)
    {
        if (moveInfo.UserId == currentUserId) return;
        InvokeAsync(() =>
        {
            try
            {
                // Update UI with the move
                var sourceColumn = columns?.FirstOrDefault(c => c.Id.ToString() == moveInfo.FromColumnId);
                var targetColumn = columns?.FirstOrDefault(c => c.Id.ToString() == moveInfo.ToColumnId);
                if (sourceColumn?.Tasks != null && targetColumn != null)
                {
                    var task = sourceColumn.Tasks.FirstOrDefault(t => t.Id.ToString() == moveInfo.TaskId);
                    if (task != null)
                    {
                        sourceColumn.Tasks.Remove(task);
                        if (moveInfo.FromColumnId != moveInfo.ToColumnId)
                        {
                            task.ColumnId = Guid.Parse(moveInfo.ToColumnId);
                            targetColumn.Tasks ??= new List<TaskDto>();
                        }
                        var insertIndex = Math.Min(moveInfo.NewPosition, targetColumn.Tasks?.Count ?? 0);
                        targetColumn.Tasks?.Insert(insertIndex, task);
                    }
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error handling task move");
            }
        });
    }

    private void OnColumnMoved(ColumnMoveInfo moveInfo)
    {
        if (moveInfo.UserId == currentUserId) return;
        InvokeAsync(() =>
        {
            try
            {
                var column = columns?.FirstOrDefault(c => c.Id.ToString() == moveInfo.ColumnId);
                if (column != null)
                {
                    column.Position = moveInfo.NewPosition;
                    UpdateSortedColumns();
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error handling column move");
            }
        });
    }

    private void OnTaskCreated(TaskDto task)
    {
        InvokeAsync(() =>
        {
            var column = columns?.FirstOrDefault(c => c.Id == task.ColumnId);
            if (column != null)
            {
                column.Tasks ??= new List<TaskDto>();
                column.Tasks.Add(task);
                StateHasChanged();
            }
        });
    }

    private void OnTaskUpdated(TaskDto task)
    {
        InvokeAsync(() =>
        {
            var column = columns?.FirstOrDefault(c => c.Tasks?.Any(t => t.Id == task.Id) == true);
            var existingTask = column?.Tasks?.FirstOrDefault(t => t.Id == task.Id);
            if (existingTask != null)
            {
                existingTask.Name = task.Name;
                existingTask.Priority = task.Priority;
                existingTask.AssignedUserIds = task.AssignedUserIds;
                StateHasChanged();
            }
        });
    }

    private void OnTaskDeleted(string taskId, string columnId)
    {
        InvokeAsync(() =>
        {
            var column = columns?.FirstOrDefault(c => c.Id.ToString() == columnId);
            column?.Tasks?.RemoveAll(t => t.Id.ToString() == taskId);
            StateHasChanged();
        });
    }

    private void OnColumnCreated(ColumnDto column)
    {
        InvokeAsync(() =>
        {
            columns?.Add(column);
            UpdateSortedColumns();
            StateHasChanged();
        });
    }

    private void OnColumnUpdated(ColumnDto column)
    {
        InvokeAsync(() =>
        {
            var existingColumn = columns?.FirstOrDefault(c => c.Id == column.Id);
            if (existingColumn != null)
            {
                existingColumn.Title = column.Title;
                StateHasChanged();
            }
        });
    }

    private void OnColumnDeleted(string columnId)
    {
        InvokeAsync(() =>
        {
            columns?.RemoveAll(c => c.Id.ToString() == columnId);
            UpdateSortedColumns();
            StateHasChanged();
        });
    }

    private void OnUserStartedEditing(string userId, string userName, string itemType, string itemId)
    {
        if (userId != currentUserId)
        {
            editingUsers[$"{itemType}_{itemId}"] = userName;
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnUserStoppedEditing(string userId, string itemType, string itemId)
    {
        editingUsers.Remove($"{itemType}_{itemId}");
        InvokeAsync(StateHasChanged);
    }

    private void OnTaskAssignmentUpdating(string taskId, string userId, bool isAssigned, string updatedByUserId, string
    updatedByUserName)
    {
        if (updatedByUserId == currentUserId) return; // Don't process our own updates

        InvokeAsync(() =>
        {
            try
            {
                // Find the task being edited by someone else
                var column = columns?.FirstOrDefault(c => c.Tasks?.Any(t => t.Id.ToString() == taskId) == true);
                var task = column?.Tasks?.FirstOrDefault(t => t.Id.ToString() == taskId);

                if (task != null && Guid.TryParse(userId, out var userGuid))
                {
                    if (isAssigned)
                    {
                        if (!task.AssignedUserIds.Contains(userGuid))
                        {
                            task.AssignedUserIds.Add(userGuid);
                        }
                    }
                    else
                    {
                        task.AssignedUserIds.Remove(userGuid);
                    }
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error handling task assignment update");
            }
        });
    }

    // Helper method to check if someone else is editing an item
    private bool IsBeingEditedByOther(string itemType, Guid itemId)
    {
        return editingUsers.ContainsKey($"{itemType}_{itemId}");
    }

    private string GetEditingUserName(string itemType, Guid itemId)
    {
        editingUsers.TryGetValue($"{itemType}_{itemId}", out var userName);
        return userName ?? "";
    }

    // Cleanup on disposal
    public async ValueTask DisposeAsync()
    {
        try
        {
            // Unsubscribe from events
            BoardHub.UserJoinedBoard -= OnUserJoinedBoard;
            BoardHub.UserLeftBoard -= OnUserLeftBoard;
            BoardHub.TaskMoved -= OnTaskMoved;
            BoardHub.ColumnMoved -= OnColumnMoved;
            BoardHub.TaskCreated -= OnTaskCreated;
            BoardHub.TaskUpdated -= OnTaskUpdated;
            BoardHub.TaskDeleted -= OnTaskDeleted;
            BoardHub.ColumnCreated -= OnColumnCreated;
            BoardHub.ColumnUpdated -= OnColumnUpdated;
            BoardHub.ColumnDeleted -= OnColumnDeleted;
            BoardHub.UserStartedEditing -= OnUserStartedEditing;
            BoardHub.UserStoppedEditing -= OnUserStoppedEditing;
            BoardHub.TaskAssignmentUpdating -= OnTaskAssignmentUpdating;

            await BoardHub.LeaveBoardAsync(BoardId.ToString());
            dotNetRef?.Dispose();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during disposal");
        }
    }

    private async Task SaveColumnEdit(Guid columnId, string title)
    {
        if (string.IsNullOrWhiteSpace(title)) return;

        try
        {
            var request = new UpdateColumnRequest { Title = title.Trim() };
            var updatedColumn = await ColumnService.UpdateColumnAsync(BoardId, columnId, request);

            var column = columns?.FirstOrDefault(c => c.Id == columnId);
            if (column != null)
            {
                column.Title = updatedColumn.Title;
            }

            await BoardHub.NotifyColumnUpdatedAsync(updatedColumn);
            await BoardHub.NotifyUserStoppedEditingAsync("column", columnId.ToString());

            editingColumnId = Guid.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating column: {ex.Message}");
        }
    }

    private async Task SaveTaskEdit(Guid columnId, Guid taskId, string name, PriorityLevel priority, List<Guid>
    assignedUserIds)
    {
        if (string.IsNullOrWhiteSpace(name)) return;

        try
        {
            var request = new UpdateTaskRequest
            {
                Name = name.Trim(),
                Priority = priority,
                AssignedUserIds = assignedUserIds
            };

            var updatedTask = await TaskService.UpdateTaskAsync(columnId, taskId, request);

            var column = columns?.FirstOrDefault(c => c.Id == columnId);
            var task = column?.Tasks?.FirstOrDefault(t => t.Id == taskId);
            if (task != null)
            {
                task.Name = updatedTask.Name;
                task.Priority = updatedTask.Priority;
                task.AssignedUserIds = updatedTask.AssignedUserIds;
            }

            await BoardHub.NotifyTaskUpdatedAsync(updatedTask);
            await BoardHub.NotifyUserStoppedEditingAsync("task", taskId.ToString());

            editingTaskId = Guid.Empty;
            editTaskAssignedUserIds = new List<Guid>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating task: {ex.Message}");
        }
    }

    private async Task HandleTaskAssignmentChange(Guid userId, bool isAssigned)
    {
        await BoardHub.NotifyTaskAssignmentUpdatingAsync(editingTaskId.ToString(), userId, isAssigned);
    }
}