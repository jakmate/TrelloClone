@using TrelloClone.Shared.DTOs
<FormModal Show="@Show" Title="Create New Task" Model="@TaskModel" OnCancel="@OnCancel" OnSubmit="@OnSubmit"
    IsSubmitting="@IsSubmitting" SubmitText="Create Task">
    <div class="mb-3">
        <label for="taskName" class="form-label">Task Name</label>
        <InputText id="taskName" class="form-control" @bind-Value="TaskModel.Name" />
    </div>
    <div class="mb-3">
        <label for="taskPriority" class="form-label">Priority</label>
        <InputSelect id="taskPriority" class="form-select" @bind-Value="TaskModel.Priority">
            <option value="@PriorityLevel.Low">Low</option>
            <option value="@PriorityLevel.Medium">Medium</option>
            <option value="@PriorityLevel.High">High</option>
        </InputSelect>
    </div>
    <div class="mb-3">
        <label for="assignedUsers" class="form-label">Assigned Users</label>
        @if (availableUsers?.Any() == true)
        {
            <div class="user-checkboxes">
                @foreach (var user in availableUsers)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="user_@user.Id" checked="@IsUserAssigned(user.Id)"
                            @onchange="@((e) => ToggleUserAssignment(user.Id, (bool)e.Value!))" />
                        <label class="form-check-label" for="user_@user.Id">
                            @user.UserName (@user.Email)
                        </label>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-muted">Loading available users...</p>
        }
    </div>
</FormModal>

@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public CreateTaskRequest TaskModel { get; set; } = new();
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<EditContext> OnSubmit { get; set; }
    [Parameter] public bool IsSubmitting { get; set; }
    [Parameter] public List<UserDto>? AvailableUsers { get; set; }

    private List<UserDto>? availableUsers => AvailableUsers;

    private bool IsUserAssigned(Guid userId)
    {
        return TaskModel.AssignedUserIds?.Contains(userId) ?? false;
    }

    private void ToggleUserAssignment(Guid userId, bool isChecked)
    {
        TaskModel.AssignedUserIds ??= new List<Guid>();

        if (isChecked)
        {
            if (!TaskModel.AssignedUserIds.Contains(userId))
            {
                TaskModel.AssignedUserIds.Add(userId);
            }
        }
        else
        {
            TaskModel.AssignedUserIds.Remove(userId);
        }
    }
}