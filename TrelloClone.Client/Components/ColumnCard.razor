@using TrelloClone.Shared.DTOs

<div class="p-3 me-2 column-card-sortable" data-column-id="@Column.Id">
    <div class="d-flex justify-content-between align-items-center mb-2 pb-2 column-header">
        @if (CanEdit)
        {
            <div class="me-2 p-1 drag-handle" title="Drag to reorder column">
                <i class="bi bi-grip-vertical"></i>
            </div>
        }
        @if (IsBeingEditedByOther)
        {
            <div class="flex-grow-1">
                <h5 class="mb-0 column-title">@Column.Title</h5>
                <i class="bi bi-pencil-square"></i>
                @EditingUserName is editing...
            </div>
        }
        else if (IsEditing)
        {
            <input type="text" class="form-control form-control-sm flex-grow-1" @bind="editTitle"
                @onkeypress="HandleKeyPress" />
        }
        else
        {
            <h5 class="mb-0 column-title flex-grow-1">@Column.Title</h5>
        }
        @if (CanEdit && !IsBeingEditedByOther)
        {
            <div class="align-self-end">
                @if (IsEditing)
                {
                    <button class="btn btn-sm btn-success" @onclick="HandleSaveEdit">
                        <i class="bi bi-check"></i>
                    </button>
                    <button class="btn btn-sm btn-secondary" @onclick="OnCancelEdit">
                        <i class="bi bi-x"></i>
                    </button>
                }
                else
                {
                    <button class="btn btn-sm btn-outline-primary" @onclick="OnStartEdit" title="Edit column">
                        <i class="bi bi-pencil"></i>
                    </button>
                }
                <button class="btn btn-sm btn-outline-danger" @onclick="OnDelete">
                    <i class="bi bi-trash3"></i>
                </button>
            </div>
        }
        else if (IsBeingEditedByOther)
        {
            <div class="text-warning">
                <i class="bi bi-lock"></i>
            </div>
        }
    </div>

    <div class="overflow-y-auto p-2" id="tasks-container-@Column.Id" data-column-id="@Column.Id">
        @if (Column.Tasks?.Any() == true)
        {
            @foreach (var task in Column.Tasks.OrderBy(t => t.Position))
            {
                <div class="task-sortable-item" data-task-id="@task.Id" @key="task.Id">
                    <TaskCard Task="@task" IsBeingEditedByOther="@(IsTaskBeingEditedByOther(task.Id))"
                        EditingUserName="@(GetTaskEditingUserName(task.Id))" IsEditing="@(EditingTaskId == task.Id)"
                        CanEdit="@CanEdit" AvailableUsers="@AvailableUsers" OnStartEdit="@OnStartEditTask"
                        OnSaveEdit="@OnSaveEditTask" OnCancelEdit="@OnCancelEditTask"
                        OnDelete="@(async () => await HandleTaskDelete(task.Id))"
                        OnAssignmentChange="@OnTaskAssignmentChange" />
                </div>
            }
        }
        else
        {
            <div class="fst-italic empty-tasks">
                <p class="m-0 text-muted">No tasks yet</p>
            </div>
        }
    </div>

    @if (CanEdit)
    {
        <button class="btn btn-sm btn-outline-primary mt-2 w-100" @onclick="OnCreateTask">
            <i class="bi bi-plus"></i> Add Task
        </button>
    }
</div>

@code {
    [Parameter] public ColumnDto Column { get; set; } = default!;
    [Parameter] public bool IsBeingEditedByOther { get; set; }
    [Parameter] public string EditingUserName { get; set; } = "";
    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public bool CanEdit { get; set; }
    [Parameter] public Guid EditingTaskId { get; set; }
    [Parameter] public List<UserDto>? AvailableUsers { get; set; }

    [Parameter] public EventCallback OnStartEdit { get; set; }
    [Parameter] public EventCallback<string> OnSaveEdit { get; set; }
    [Parameter] public EventCallback OnCancelEdit { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public EventCallback OnCreateTask { get; set; }
    [Parameter] public EventCallback<(Guid taskId, string name, PriorityLevel priority)> OnStartEditTask { get; set; }
    [Parameter]
    public EventCallback<(Guid taskId, string name, PriorityLevel priority, List<Guid> assignedUsers)>
    OnSaveEditTask
    { get; set; }
    [Parameter] public EventCallback OnCancelEditTask { get; set; }
    [Parameter] public EventCallback<Guid> OnDeleteTask { get; set; }
    [Parameter] public EventCallback<(Guid userId, bool isAssigned)> OnTaskAssignmentChange { get; set; }
    [Parameter] public Func<Guid, bool> IsTaskBeingEditedByOther { get; set; } = _ => false;
    [Parameter] public Func<Guid, string> GetTaskEditingUserName { get; set; } = _ => "";

    private string editTitle = "";
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    protected override void OnParametersSet()
    {
        if (IsEditing && string.IsNullOrEmpty(editTitle))
        {
            editTitle = Column.Title;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && CanEdit)
        {
            await JSRuntime.InvokeVoidAsync("initTasksSortable", $"tasks-container-{Column.Id}");
        }
    }

    private async Task HandleSaveEdit()
    {
        if (!string.IsNullOrWhiteSpace(editTitle))
        {
            await OnSaveEdit.InvokeAsync(editTitle);
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(editTitle))
        {
            await OnSaveEdit.InvokeAsync(editTitle);
        }
        else if (e.Key == "Escape")
        {
            await OnCancelEdit.InvokeAsync();
        }
    }

    private async Task HandleTaskDelete(Guid taskId)
    {
        await OnDeleteTask.InvokeAsync(taskId);
    }
}