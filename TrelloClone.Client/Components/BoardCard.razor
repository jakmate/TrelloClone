@using TrelloClone.Shared.DTOs
@inject NavigationManager Navigation

<div class="board-card" @onclick="NavigateToBoard">
    <div class="card-content">
        <div class="card-header">
            <h3 class="card-title">@Board.Name</h3>
            
            @if (CanEdit || !IsOwner)
            {
                <div class="card-actions">
                    @if (CanEdit)
                    {
                        <button class="btn btn-sm btn-outline-primary" @onclick="HandleUpdate" @onclick:stopPropagation="true" title="Edit board">
                            <i class="bi bi-pencil"></i>
                        </button>
                    }
                    @if (IsOwner)
                    {
                        <button class="btn btn-sm btn-outline-danger" @onclick="HandleDelete" @onclick:stopPropagation="true" title="Delete board">
                            <i class="bi bi-trash3"></i>
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-outline-danger" @onclick="HandleLeave" @onclick:stopPropagation="true" title="Leave board">
                            <i class="bi bi-door-closed"></i>
                        </button>
                    }
                </div>
            }
        </div>
        
        <div class="card-footer">
            <div class="footer-content">
                <i class="bi bi-grid-3x3-gap"></i>
                <span>Click to open</span>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public BoardDto Board { get; set; } = null!;
    [Parameter] public bool CanEdit { get; set; }
    [Parameter] public bool IsOwner { get; set; }
    [Parameter] public EventCallback<BoardDto> OnUpdate { get; set; }
    [Parameter] public EventCallback<BoardDto> OnDelete { get; set; }
    [Parameter] public EventCallback<BoardDto> OnLeave { get; set; }

    private void NavigateToBoard() => Navigation.NavigateTo($"/board/{Board.Id}");

    private async Task HandleUpdate() => await OnUpdate.InvokeAsync(Board);
    private async Task HandleDelete() => await OnDelete.InvokeAsync(Board);
    private async Task HandleLeave() => await OnLeave.InvokeAsync(Board);
}