@using TrelloClone.Shared.DTOs
@inject NavigationManager Navigation

<div class="d-flex flex-column overflow-hidden h-auto board-card" @onclick="NavigateToBoard">
    <div class="p-4 flex-grow-1 position-relative">
        <h3 class="card-title">@Board.Name</h3>
        <div class="d-flex gap-2 position-absolute card-actions">
            @if (CanEdit)
            {
                <button class="btn btn-outline-primary" @onclick="HandleUpdate" @onclick:stopPropagation="true"
                    title="Edit board">
                    <i class="bi bi-pencil"></i>
                </button>
            }
            @if (IsOwner)
            {
                <button class="btn btn-outline-danger" @onclick="HandleDelete" @onclick:stopPropagation="true"
                    title="Delete board">
                    <i class="bi bi-trash3"></i>
                </button>
            }
            else
            {
                <button class="btn btn-outline-danger" @onclick="HandleLeave" @onclick:stopPropagation="true"
                    title="Leave board">
                    <i class="bi bi-door-closed"></i>
                </button>
            }
        </div>
    </div>

    <div class="ps-4 pb-3 pt-3 card-footer">
        <div class="fs-6 footer-content">
            <i class="bi bi-grid-3x3-gap"></i>
            <span>Click to open</span>
        </div>
    </div>
</div>

@code {
    [Parameter] public BoardDto Board { get; set; } = null!;
    [Parameter] public bool CanEdit { get; set; }
    [Parameter] public bool IsOwner { get; set; }
    [Parameter] public EventCallback<BoardDto> OnUpdate { get; set; }
    [Parameter] public EventCallback<BoardDto> OnDelete { get; set; }
    [Parameter] public EventCallback<BoardDto> OnLeave { get; set; }

    private void NavigateToBoard() => Navigation.NavigateTo($"/board/{Board.Id}");

    private async Task HandleUpdate() => await OnUpdate.InvokeAsync(Board);
    private async Task HandleDelete() => await OnDelete.InvokeAsync(Board);
    private async Task HandleLeave() => await OnLeave.InvokeAsync(Board);
}