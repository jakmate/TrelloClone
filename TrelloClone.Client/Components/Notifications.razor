@using TrelloClone.Shared.DTOs
@inject IInvitationService InvitationService
@inject NotificationHubClient NotificationHub
@implements IDisposable

<div class="position-relative">
    <button class="notifications-toggle" @onclick="ToggleDropdown">
        <i class="bi bi-bell"></i>
        @if (UnreadCount > 0)
        {
            <span class="notifications-badge">@UnreadCount</span>
        }
    </button>

    <div class="notifications-dropdown @(IsOpen ? "show" : "")">
        <div class="notifications-header">
            <h6>Invitations</h6>
            @if (Invitations.Count > 0)
            {
                <span class="notifications-count">@Invitations.Count</span>
            }
        </div>

        <div class="notifications-content">
            @if (Invitations.Count == 0)
            {
                <div class="notifications-empty">
                    <i class="bi bi-inbox"></i>
                    <p>No pending invitations</p>
                </div>
            }
            else
            {
                <div class="notifications-list">
                    @foreach (var invitation in Invitations)
                    {
                        <div class="notification-item">
                            <div class="notification-content">
                                <div class="notification-title">@invitation.BoardName</div>
                                <div class="notification-details">
                                    <span>Invited by: @invitation.InviterName</span>
                                    <span class="notification-time">@invitation.SentAt.ToString("g")</span>
                                </div>
                            </div>
                            <div class="notification-actions">
                                <button class="btn-accept" @onclick="() => Accept(invitation.Id)" title="Accept invitation">
                                    <i class="bi bi-check-lg"></i>
                                </button>
                                <button class="btn-decline" @onclick="() => Decline(invitation.Id)" title="Decline invitation">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool IsOpen { get; set; }
    private int UnreadCount { get; set; }
    private List<BoardInvitationDto> Invitations { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        NotificationHub.OnInvitationReceived += HandleNewInvitation;
        await LoadInvitations();
    }

    private async Task LoadInvitations()
    {
        Invitations = await InvitationService.GetPendingInvitations();
        UnreadCount = Invitations.Count;
    }

    private async void HandleNewInvitation(BoardInvitationDto invitation)
    {
        await InvokeAsync(() =>
        {
            Invitations.Add(invitation);
            UnreadCount++;
            StateHasChanged();
        });
    }

    private void ToggleDropdown()
    {
        IsOpen = !IsOpen;
        if (IsOpen) UnreadCount = 0; // Mark as read when opened
    }

    private async Task Accept(Guid invitationId)
    {
        await InvitationService.AcceptInvitation(invitationId);
        RemoveInvitation(invitationId);
    }

    private async Task Decline(Guid invitationId)
    {
        await InvitationService.DeclineInvitation(invitationId);
        RemoveInvitation(invitationId);
    }

    private void RemoveInvitation(Guid invitationId)
    {
        var invitation = Invitations.FirstOrDefault(i => i.Id == invitationId);
        if (invitation != null)
        {
            Invitations.Remove(invitation);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        NotificationHub.OnInvitationReceived -= HandleNewInvitation;
    }
}